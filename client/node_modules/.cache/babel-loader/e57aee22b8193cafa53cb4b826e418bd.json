{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/Ganzi_Frontend/Frontend/client/src/providers/Peer.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PeerContext = /*#__PURE__*/React.createContext(null);\nexport const usePeer = () => {\n  _s();\n  return React.useContext(PeerContext);\n};\n_s(usePeer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const PeerProvider = props => {\n  _s2();\n  const peer = useMemo(() => new RTCPeerConnection({\n    iceServers: [{\n      /* STUN 서버 사용하여 WebRTC Peer Connection 매끄롭도록 */\n      urls: [\"stun:stun.l.google.com:19302\", \"stun:global.stun.twilio.com:3478\"]\n    }]\n  }), []);\n  const createOffer = async () => {\n    const offer = await peer.createOffer();\n    await peer.setLocalDescription(offer);\n    return offer;\n  };\n  const createAnswer = async offer => {\n    const answer = await peer.createAnswer();\n  };\n  return /*#__PURE__*/_jsxDEV(PeerContext.Provider, {\n    value: {\n      peer,\n      createOffer\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s2(PeerProvider, \"kiT5QPzwKAuTQqPmxRvJyKzCZnI=\");\n_c = PeerProvider;\nvar _c;\n$RefreshReg$(_c, \"PeerProvider\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","PeerContext","createContext","usePeer","_s","useContext","PeerProvider","props","_s2","peer","RTCPeerConnection","iceServers","urls","createOffer","offer","setLocalDescription","createAnswer","answer","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mina/Desktop/Ganzi_Frontend/Frontend/client/src/providers/Peer.jsx"],"sourcesContent":["import React, { useMemo } from \"react\";\n\nconst PeerContext = React.createContext(null);\n\nexport const usePeer = () => React.useContext(PeerContext);\n\nexport const PeerProvider = (props) => {\n    const peer = useMemo(() => new RTCPeerConnection({\n        iceServers : [\n            {\n                /* STUN 서버 사용하여 WebRTC Peer Connection 매끄롭도록 */\n                urls: [\n                    \"stun:stun.l.google.com:19302\",\n                    \"stun:global.stun.twilio.com:3478\"\n                ],\n            },\n        ],    \n     }), \n    []\n); \n\n    const createOffer = async () => {\n        const offer = await peer.createOffer();\n        await peer.setLocalDescription(offer);\n        return offer;\n    };\n\n    const createAnswer = async (offer) => {\n        const answer = await peer.createAnswer();\n    }\n\n    return (\n    <PeerContext.Provider value = {{ peer, createOffer }}>\n        {props.children}\n    </PeerContext.Provider>\n    );  \n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAa,CAAC,IAAI,CAAC;AAE7C,OAAO,MAAMC,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,KAAK,CAACQ,UAAU,CAACJ,WAAW,CAAC;AAAA;AAACG,EAAA,CAA9CD,OAAO;AAEpB,OAAO,MAAMG,YAAY,GAAIC,KAAK,IAAK;EAAAC,GAAA;EACnC,MAAMC,IAAI,GAAGX,OAAO,CAAC,MAAM,IAAIY,iBAAiB,CAAC;IAC7CC,UAAU,EAAG,CACT;MACI;MACAC,IAAI,EAAE,CACF,8BAA8B,EAC9B,kCAAkC;IAE1C,CAAC;EAER,CAAC,CAAC,EACH,EACJ,CAAC;EAEG,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAG,MAAML,IAAI,CAACI,WAAW,CAAC,CAAC;IACtC,MAAMJ,IAAI,CAACM,mBAAmB,CAACD,KAAK,CAAC;IACrC,OAAOA,KAAK;EAChB,CAAC;EAED,MAAME,YAAY,GAAG,MAAOF,KAAK,IAAK;IAClC,MAAMG,MAAM,GAAG,MAAMR,IAAI,CAACO,YAAY,CAAC,CAAC;EAC5C,CAAC;EAED,oBACAhB,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAI;MAAEV,IAAI;MAAEI;IAAY,CAAE;IAAAO,QAAA,EAChDb,KAAK,CAACa;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE3B,CAAC;AAAChB,GAAA,CA9BWF,YAAY;AAAAmB,EAAA,GAAZnB,YAAY;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}